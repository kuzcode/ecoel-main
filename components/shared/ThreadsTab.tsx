import{redirect}from"next/navigation";import{fetchUserPosts}from"@/lib/actions/user.actions";import ThreadCard from"../cards/ThreadCard";interface Result{name:string;image:string;id:string;verif:boolean;threads:{isAnonym:boolean;_id:string;text:string;parentId:string|null;verif:boolean;likes:Array<string>;
author:{name:string;image:string;id:string;verif:boolean};createdAt:string;children:{author:{image:string}}[]}[]}interface Props{currentUserId:string;accountId:string;accountType:string}async function ThreadsTab({currentUserId,accountId,accountType}:Props){let result:Result;{result=await fetchUserPosts(accountId)}if(!result){redirect("/")}return(<section className='mt-9 flex flex-col gap-10'> {result.threads.map((thread)=>(<ThreadCard key={thread._id} id={thread._id} currentUserId={currentUserId} parentId={thread.parentId} content={thread.text} likes={thread.likes} isAnonym={thread.isAnonym} author={accountType==="User"?{name:result.name,image:result.image,id:result.id,verif:result.verif}:{name:thread.author.name,image:thread.author.image,id:thread.author.id,verif:thread.author.verif}} createdAt={thread.createdAt}comments={thread.children}/>))}</section>)}export default ThreadsTab;